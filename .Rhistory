# Task 3 (done)
den1<density(rock$shape*30000)
den2<density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<density(rock$shape*30000)
den2<density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<- density(rock$shape*30000)
den2<- density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<- density(rock$shape*30000)
den2<- density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<- density(rock$shape*30000)
den2<- density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<- density(rock$shape*30000)
den2<- density(rock$area)
plot(den1,main="the Density of area and shape functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 3 (done)
den1<- density(rock$shape*30000)
den2<- density(rock$area)
plot(den1,main="Area and Shape Density functions",col="red",lwd=2)
lines(den2,col="green",lwd=2)
legend("topright", c("Area", "Shape"),
col =c("green","red"), lty=1)
# Task 5 (done)
install.packages("dplyr")
library(dplyr)
# Task 5 (done)
install.packages("dplyr")
library(dplyr)
data_rock <- rock %>%
filter(shape > 0.3) %>%
group_by(perm) %>%
summarize(shape_mean = mean(shape))
View(data_rock)
install.packages("e1071")
library(e1071)
new_data <- rbind(rock[1:2,],rock[5:6,],rock[9:10,],rock[13:14,])
new_data <- rbind(new_data,rock[17:18,],rock[21:22,],rock[25:26,])
new_data <- rbind(new_data,rock[29:30,],rock[33:34,],rock[37:40,])
new_data <- rbind(new_data,rock[41:42,],rock[45:46,])
new_test <- rbind(rock[3:4,],rock[7:8,],rock[11:12,],rock[15:16,])
new_test <- rbind(new_test,rock[19:20,],rock[23:24,],rock[27:28,])
new_test <- rbind(new_test,rock[31:32,],rock[35:36,],rock[37:40,])
new_test <- rbind(new_test,rock[43:44,],rock[47:48,])
class_perm <- naiveBayes(perm~area+shape, data = new_data)
permpredict <- predict(class_perm ,newdata = new_test)
permpredict
table(permpredict)
#Bonus
install.packages("e1071")
library(e1071)
# Task 1 (done)
function1 <- function(value, vector)
{
for(i in 1:length(vector))
{
if(vector[i]==value)
{
return(i)
}
}
x<-c(1,2,1,3,5,7)
function1(2,x)
function1(2,x)
function1(5,x)
#Bonus
install.packages("e1071")
library(e1071)
#Bonus
install.packages("e1071")
library(e1071)
install.packages("e1071")
library(e1071)
new_data <- rbind(rock[1:2,],rock[5:6,],rock[9:10,],rock[13:14,])
new_data <- rbind(new_data,rock[17:18,],rock[21:22,],rock[25:26,])
new_data <- rbind(new_data,rock[29:30,],rock[33:34,],rock[37:40,])
new_data <- rbind(new_data,rock[41:42,],rock[45:46,])
new_test <- rbind(rock[3:4,],rock[7:8,],rock[11:12,],rock[15:16,])
new_test <- rbind(new_test,rock[19:20,],rock[23:24,],rock[27:28,])
new_test <- rbind(new_test,rock[31:32,],rock[35:36,],rock[37:40,])
new_test <- rbind(new_test,rock[43:44,],rock[47:48,])
class_perm <- naiveBayes(perm~area+shape, data = new_data)
permpredict <- predict(class_perm ,newdata = new_test)
permpredict
table(permpredict)
new_data <- rbind(rock[1:2,],rock[5:6,],rock[9:10,],rock[13:14,])
new_data <- rbind(new_data,rock[17:18,],rock[21:22,],rock[25:26,])
new_data <- rbind(new_data,rock[29:30,],rock[33:34,],rock[37:40,])
new_data <- rbind(new_data,rock[41:42,],rock[45:46,])
new_test <- rbind(rock[3:4,],rock[7:8,],rock[11:12,],rock[15:16,])
new_test <- rbind(new_test,rock[19:20,],rock[23:24,],rock[27:28,])
new_test <- rbind(new_test,rock[31:32,],rock[35:36,],rock[37:40,])
new_test <- rbind(new_test,rock[43:44,],rock[47:48,])
class_perm <- naiveBayes(perm~area+shape, data = new_data)
permpredict <- predict(class_perm ,newdata = new_test)
permpredict
table(permpredict)
>plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue”)
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue”)
ChickWeight
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue”)
install.packages("odbc")
library("odbc")
ChickWeight
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue”)
plot(ChickWeight)
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue”)
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue")
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight”, col = "blue")
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight", col = "blue" )
plot(rock$perm,rock$area, main="area of the rock relative to its
perm", xlab="The Perm of the rock", ylab="Area of the rock",pch=3)
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "diet", ylab = "Weight",
main = "Type of Diet Effect on Weight", col = "blue" )
summery(ChickWeight)
summary(ChickWeight)
str(ChickWeight)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight,side=2)
rug(ChickWeight$weight,side=1)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight,side=1)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight,side=3)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight,side=4)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight)
boxplot(ChickWeight$weight, col = rainbow(6), ylab = "ChickWeight Boxplot")
rug(ChickWeight$weight,side=2)
par(mfcol = c(3,1))
hist(ChickWeight  $weight*1000, breaks = 10, main = "Weight (in mg)", xlab = "Weight")
hist(ChickWeight$weight, breaks = 10, main = "Weight (in g)", xlab = "Weight")
hist(ChickWeight$weight/1000,breaks = 10, main = "Weight (in kg)", xlab = "Weight")
par(mfrow = c(3,1))
hist(ChickWeight  $weight*1000, breaks = 10, main = "Weight (in mg)", xlab = "Weight")
hist(ChickWeight$weight, breaks = 10, main = "Weight (in g)", xlab = "Weight")
hist(ChickWeight$weight/1000,breaks = 10, main = "Weight (in kg)", xlab = "Weight")
par(mfrow = c(3,1))
hist(ChickWeight  $weight*1000, breaks = 10, main = "Weight (in mg)", xlab = "Weight")
hist(ChickWeight$weight, breaks = 10, main = "Weight (in g)", xlab = "Weight")
hist(ChickWeight$weight/1000,breaks = 10, main = "Weight (in kg)", xlab = "Weight")
View(ChickWeight)
hist(ChickWeight$weight/1000, breaks = 10, main = "Weight (in mg)", xlab = "Weight")
par(mfrow = c(1,2))
hist(ChickWeight$weight/1000, breaks = 10, main="weight in kg", xlab = "Weight")
boxplot(ChickWeight$weight/1000,main="weight in kg",xlab = "Weight" ,col = "red")
par(mfrow = c(1,2))
hist(ChickWeight$weight/1000, breaks = 20, main="weight in kg", xlab = "Weight")
boxplot(ChickWeight$weight/1000,main="weight in kg",xlab = "Weight" ,col = "red")
par(mfrow = c(1,2))
hist(ChickWeight$weight/1000, main="weight in kg", xlab = "Weight")
boxplot(ChickWeight$weight/1000,main="weight in kg",xlab = "Weight" ,col = "red")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight,list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[1,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,5],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,5],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$x, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$Group.1, names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$Group.1,names.arg= AvgWeightPerDay$Group.1 main= "Average Weight Per Day")
AvgWeightPerDay <- aggregate(ChickWeight[,1],list(ChickWeight$Time), mean)
AvgWeightPerDay
barplot(AvgWeightPerDay$Group.1,names.arg= AvgWeightPerDay$Group.1, main= "Average Weight Per Day")
mtcars
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex =0.7, main = "Miles Per Gallon", xlab= "MPG")
mtcars
dotchart(mtcars$mpg,groups=mtcars$gear,, labels = row.names(mtcars),
cex =0.7, main = "Miles Per Gallon", xlab= "MPG")
mtcars
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex =0.7, main = "Miles Per Gallon", xlab= "MPG")
mtcars
dotchart(mtcars$mpg, labels = col.names(mtcars),
cex =0.7, main = "Miles Per Gallon", xlab= "MPG")
mtcars
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex =0.7, main = "Miles Per Gallon", xlab= "MPG")
x1<- rnorm(20)
x1
x1<- rnorm(20)
x1
x1<- rnorm(20,3,4)
x1
x1<- rnorm(20,3,4)
x1
ChickWeight
x<- ChickWeight %>%
filter(weight>=32 & weight<=100)
x
install.packages("dplyr")
library(dplyr)
x<- ChickWeight %>%
filter(weight>=32 & weight<=100)
x
x<- ChickWeight %>%
filter(weight>=32 & weight<=100)
x
View(x)
x<- ChickWeight %>%
group_by(ChickWeight$Time)
ChickWeight %>%
group_by(ChickWeight$Time)
summarize(average=mean(ChickWeight$Time))
ChickWeight %>%
group_by(ChickWeight$Time)
summarise(average=mean(ChickWeight$Time))
ChickWeight %>%
group_by(ChickWeight$Time)
summarise(average=mean(ChickWeight$Time))
ChickWeight %>%
group_by(ChickWeight$Time) %>%
summarise(average=mean(ChickWeight$Time))
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange()
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange(ChickWeight)
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange()
ChickWeight %>%
group_by(Time) %>%
ChickWeight %>%
group_by(sum(Time)) %>%
ChickWeight %>%
group_by(sum(Time)) %>%
ChickWeight %>%
group_by(mean(Time))
ChickWeight %>%
group_by(Time)
ChickWeight %>%
group_by(Time)
View(ChickWeight)
View(ChickWeight)
ChickWeight %>%
group_by(sum(Time))
View(ChickWeight)
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange()
install.packages("dplyr")
library(dplyr)
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange()
install.packages("dplyr")
ChickWeight %>%
group_by(Time) %>%
summarise(average=mean(weight))%>%
arrange()
ChickWeight %>%
group_by(Time) %>%
summarise(sum=sum(weight))%>%
arrange()
ChickWeight %>%
group_by(Time) %>%
summarise(median=median(weight))%>%
arrange()
year <- rep(2008:2010, each=4)
#2008,2008,2008,2008,2009,2009,2009,2009,2010,2010,2010,2010
quarter <- rep(1:4, 3)
#1,2,3,4,1,2,3,4,1,2,3,4
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0 )
year <- rep(2008:2010, each=4)
#2008,2008,2008,2008,2009,2009,2009,2009,2010,2010,2010,2010
quarter <- rep(1:4, 3)
#1,2,3,4,1,2,3,4,1,2,3,4
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0 )
fit <- lm(cpi ~ year + quarter)
year <- rep(2008:2010, each=4)
#2008,2008,2008,2008,2009,2009,2009,2009,2010,2010,2010,2010
quarter <- rep(1:4, 3)
#1,2,3,4,1,2,3,4,1,2,3,4
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0 )
fit <- lm(cpi ~ year + quarter)
fit
attributes(fit)
fit$coefficients
residuals(fit)
fit$residuals
fit$residuals
attributes(fit)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1,labels=paste(year, quarter, sep="Q"), at=1:12, las=3)
fit <- lm(cpi ~ year + quarter)
fit
cor(year,cpi) #0.9096316
cor(quarter,cpi) #0.3738028
cpi2011 <- fit$coefficients[1] + fit$coefficients[2]*2011 + fit$coefficients[3]*(1:4)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1,labels=paste(year, quarter, sep="Q"), at=1:12, las=5)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1,labels=paste(year, quarter, sep="Q"), at=1:12, las=3)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1,labels=paste(year, quarter, sep="Q"), at=1:12, las=2)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0, 166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1,labels=paste(year, quarter, sep="Q"), at=1:12, las=3)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
x,y
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
x
y
nx
nx = length(x)
nx
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=T)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=F)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=T)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=T)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=f)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=T)
x = rnorm(10) # distribution centered at 0
y = rnorm(10,2) # distribution centered at 2
t.test(x, y, var.equal=F)
m <- naiveBayes(Survived ~ ., data = Titanic)
v=predict(m, as.data.frame(Titanic))
table(v)
Titanic
m <- naiveBayes(Survived ~ ., data = Titanic)
v=predict(m, as.data.frame(Titanic))
table(v)
Titanic
m <- naiveBayes(Survived ~ ., data = Titanic)
v<-predict(m, as.data.frame(Titanic))
table(v)
Titanic
m <- naiveBayes(Survived ~ ., data = Titanic)
v<-predict(m, as.data.frame(Titanic))
v
